plugins {
    id "fabric-loom" version "1.4-SNAPSHOT"
    id "maven-publish"
    id "me.modmuss50.mod-publish-plugin" version "0.4.+"
}

archivesBaseName = property("mod.name")
version = "${property("mod.version")}+${stonecutter.current().version()}"
group = property("mod.maven_group")

base {
    archivesName = archivesBaseName
}

repositories {
    maven { url = "https://jitpack.io" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Curseforge"
                url = "https://www.cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current().version()}"
    mappings "net.fabricmc:yarn:${property("deps.yarn")}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property("deps.fabric_loader")}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property("deps.fabric_api")}"
}

def target = ">=${project.property("mod.min_target")}- <=${project.property("mod.max_target")}"

processResources {
    filesMatching("fabric.mod.json") {
        expand "id": archivesBaseName,
                "display": project.property("mod.display"),
                "mod_version": version,
                "target_minecraft": target
    }
}

loom {
    accessWidenerPath = getRootProject().file("src/main/resources/worldrenderer.accesswidener")
}

sourceSets {
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

if (stonecutter.current().isActiveVersion()) {
    loom {
        runs {
            testClient {
                client()
                name = "Testmod Client"
                source sourceSets.test
            }
        }

        runConfigs.client.ideConfigGenerated = true

        runConfigs.all {
            vmArgs "-Dmixin.debug.export=true"
            runDir "../../run"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 16
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    repositories {
        maven {
            name = "kikugieMaven"
            url = "https://maven.kikugie.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = "${group}.${archivesBaseName}"
            artifactId = property("mod.version")
            version = stonecutter.current().version()

            from components.java
        }
    }
}

// Create a task to collect the completed jars in the root project"s build/libs folder.
def collectJars = tasks.register("collectJars", Copy) { copy ->

    def task = tasks.named("remapJar")

    dependsOn(task)

    copy.from task
    copy.into rootProject.buildDir.path + "/libs"
}

// Set up assemble to depend on the collectJars task, so it gets run on build.
assemble {
    dependsOn(collectJars)
}

if (stonecutter.current().isActiveVersion()) {
    rootProject.tasks.register("buildActive") {
        setGroup "project"

        dependsOn tasks.named("build")
    }
}
